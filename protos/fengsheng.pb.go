// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.4
// source: fengsheng.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Phase int32

const (
	Phase_Draw_Phase       Phase = 0 // 摸牌阶段
	Phase_Main_Phase       Phase = 1 // 出牌阶段
	Phase_Send_Start_Phase Phase = 2 // 情报传递阶段开始时
	Phase_Send_Phase       Phase = 3 // 传递阶段
	Phase_Fight_Phase      Phase = 4 // 争夺阶段
	Phase_Receive_Phase    Phase = 5 // 接收阶段
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "Draw_Phase",
		1: "Main_Phase",
		2: "Send_Start_Phase",
		3: "Send_Phase",
		4: "Fight_Phase",
		5: "Receive_Phase",
	}
	Phase_value = map[string]int32{
		"Draw_Phase":       0,
		"Main_Phase":       1,
		"Send_Start_Phase": 2,
		"Send_Phase":       3,
		"Fight_Phase":      4,
		"Receive_Phase":    5,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[0].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[0]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{0}
}

type CardType int32

const (
	CardType_Cheng_Qing CardType = 0 // 澄清
	CardType_Shi_Tan    CardType = 1 // 试探
	CardType_Wei_Bi     CardType = 2 // 威逼
	CardType_Li_You     CardType = 3 // 利诱
	CardType_Ping_Heng  CardType = 4 // 平衡
	CardType_Po_Yi      CardType = 5 // 破译
	CardType_Jie_Huo    CardType = 6 // 截获
	CardType_Diao_Bao   CardType = 7 // 调包
	CardType_Wu_Dao     CardType = 8 // 误导
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "Cheng_Qing",
		1: "Shi_Tan",
		2: "Wei_Bi",
		3: "Li_You",
		4: "Ping_Heng",
		5: "Po_Yi",
		6: "Jie_Huo",
		7: "Diao_Bao",
		8: "Wu_Dao",
	}
	CardType_value = map[string]int32{
		"Cheng_Qing": 0,
		"Shi_Tan":    1,
		"Wei_Bi":     2,
		"Li_You":     3,
		"Ping_Heng":  4,
		"Po_Yi":      5,
		"Jie_Huo":    6,
		"Diao_Bao":   7,
		"Wu_Dao":     8,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[1].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[1]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{1}
}

type Color int32

const (
	Color_Black Color = 0 // 对于身份，则是绿色（神秘人）；对于卡牌，则是黑色
	Color_Red   Color = 1 // 红色
	Color_Blue  Color = 2 // 蓝色
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0: "Black",
		1: "Red",
		2: "Blue",
	}
	Color_value = map[string]int32{
		"Black": 0,
		"Red":   1,
		"Blue":  2,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[2].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[2]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{2}
}

// 神秘人任务
type SecretTask int32

const (
	SecretTask_Killer    SecretTask = 0 // 你的回合中，一名红色和蓝色情报合计不少于2张的人死亡
	SecretTask_Stealer   SecretTask = 1 // 你的回合中，有人宣胜，则你代替他胜利
	SecretTask_Collector SecretTask = 2 // 你获得3张红色情报或者3张蓝色情报
)

// Enum value maps for SecretTask.
var (
	SecretTask_name = map[int32]string{
		0: "Killer",
		1: "Stealer",
		2: "Collector",
	}
	SecretTask_value = map[string]int32{
		"Killer":    0,
		"Stealer":   1,
		"Collector": 2,
	}
)

func (x SecretTask) Enum() *SecretTask {
	p := new(SecretTask)
	*p = x
	return p
}

func (x SecretTask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretTask) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[3].Descriptor()
}

func (SecretTask) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[3]
}

func (x SecretTask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretTask.Descriptor instead.
func (SecretTask) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{3}
}

type Direction int32

const (
	Direction_Up    Direction = 0 // 向上
	Direction_Left  Direction = 1 // 向左
	Direction_Right Direction = 2 // 向右
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "Up",
		1: "Left",
		2: "Right",
	}
	Direction_value = map[string]int32{
		"Up":    0,
		"Left":  1,
		"Right": 2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[4].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[4]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{4}
}

// 返回房间所有人的信息
type GetRoomInfoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names      []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"` // 其它所有人的名字
	MyPosition uint32   `protobuf:"varint,2,opt,name=my_position,json=myPosition,proto3" json:"my_position,omitempty"`
}

func (x *GetRoomInfoToc) Reset() {
	*x = GetRoomInfoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomInfoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomInfoToc) ProtoMessage() {}

func (x *GetRoomInfoToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomInfoToc.ProtoReflect.Descriptor instead.
func (*GetRoomInfoToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{0}
}

func (x *GetRoomInfoToc) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GetRoomInfoToc) GetMyPosition() uint32 {
	if x != nil {
		return x.MyPosition
	}
	return 0
}

// 请求加一个机器人
type AddRobotTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddRobotTos) Reset() {
	*x = AddRobotTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRobotTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRobotTos) ProtoMessage() {}

func (x *AddRobotTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRobotTos.ProtoReflect.Descriptor instead.
func (*AddRobotTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{1}
}

// 通知谁加入了房间
type JoinRoomToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Position uint32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *JoinRoomToc) Reset() {
	*x = JoinRoomToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomToc) ProtoMessage() {}

func (x *JoinRoomToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomToc.ProtoReflect.Descriptor instead.
func (*JoinRoomToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{2}
}

func (x *JoinRoomToc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JoinRoomToc) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// 通知谁离开的房间
type LeaveRoomToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *LeaveRoomToc) Reset() {
	*x = LeaveRoomToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRoomToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRoomToc) ProtoMessage() {}

func (x *LeaveRoomToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRoomToc.ProtoReflect.Descriptor instead.
func (*LeaveRoomToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{3}
}

func (x *LeaveRoomToc) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// 卡牌的结构体
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId      uint32    `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                                    // 卡牌ID
	CardColor   []Color   `protobuf:"varint,2,rep,packed,name=card_color,json=cardColor,proto3,enum=Color" json:"card_color,omitempty"`         // 卡牌颜色（因为可能有双色卡，所以用了repeated）
	CardDir     Direction `protobuf:"varint,3,opt,name=card_dir,json=cardDir,proto3,enum=Direction" json:"card_dir,omitempty"`                  // 卡牌上的箭头方向
	CardType    CardType  `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,enum=CardType" json:"card_type,omitempty"`                // 卡牌类型
	WhoDrawCard []Color   `protobuf:"varint,5,rep,packed,name=who_draw_card,json=whoDrawCard,proto3,enum=Color" json:"who_draw_card,omitempty"` // （试探卡）哪个身份的人摸1张牌（那么另外的身份一定是弃1张牌）
	CanLock     bool      `protobuf:"varint,6,opt,name=can_lock,json=canLock,proto3" json:"can_lock,omitempty"`                                 // 是否有锁定标记
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{4}
}

func (x *Card) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *Card) GetCardColor() []Color {
	if x != nil {
		return x.CardColor
	}
	return nil
}

func (x *Card) GetCardDir() Direction {
	if x != nil {
		return x.CardDir
	}
	return Direction_Up
}

func (x *Card) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_Cheng_Qing
}

func (x *Card) GetWhoDrawCard() []Color {
	if x != nil {
		return x.WhoDrawCard
	}
	return nil
}

func (x *Card) GetCanLock() bool {
	if x != nil {
		return x.CanLock
	}
	return false
}

// 通知客户端：初始化游戏
type InitToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCount uint32     `protobuf:"varint,1,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`              // 玩家总人数（包括你）
	Identity    Color      `protobuf:"varint,2,opt,name=identity,proto3,enum=Color" json:"identity,omitempty"`                            // 你的身份
	SecretTask  SecretTask `protobuf:"varint,3,opt,name=secret_task,json=secretTask,proto3,enum=SecretTask" json:"secret_task,omitempty"` // （你的身份是神秘人时）你的机密任务
}

func (x *InitToc) Reset() {
	*x = InitToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitToc) ProtoMessage() {}

func (x *InitToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitToc.ProtoReflect.Descriptor instead.
func (*InitToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{5}
}

func (x *InitToc) GetPlayerCount() uint32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *InitToc) GetIdentity() Color {
	if x != nil {
		return x.Identity
	}
	return Color_Black
}

func (x *InitToc) GetSecretTask() SecretTask {
	if x != nil {
		return x.SecretTask
	}
	return SecretTask_Killer
}

// 通知客户端：某个玩家摸了一张卡
type AddCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         uint32  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                           // 自己是0，右手方第一名玩家是1，以此类推
	UnknownCardCount uint32  `protobuf:"varint,2,opt,name=unknown_card_count,json=unknownCardCount,proto3" json:"unknown_card_count,omitempty"` // 背面朝上的牌的数量（用于其它人摸牌，你看不到）
	Cards            []*Card `protobuf:"bytes,3,rep,name=cards,proto3" json:"cards,omitempty"`                                                  // 摸到的卡牌
}

func (x *AddCardToc) Reset() {
	*x = AddCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardToc) ProtoMessage() {}

func (x *AddCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardToc.ProtoReflect.Descriptor instead.
func (*AddCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{6}
}

func (x *AddCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *AddCardToc) GetUnknownCardCount() uint32 {
	if x != nil {
		return x.UnknownCardCount
	}
	return 0
}

func (x *AddCardToc) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 请求使用试探
type UseShiTanTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 卡牌ID
	PlayerId uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Seq      uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseShiTanTos) Reset() {
	*x = UseShiTanTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseShiTanTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseShiTanTos) ProtoMessage() {}

func (x *UseShiTanTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseShiTanTos.ProtoReflect.Descriptor instead.
func (*UseShiTanTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{7}
}

func (x *UseShiTanTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseShiTanTos) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseShiTanTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知客户端，谁对谁使用了试探
type UseShiTanToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                     // 使用者
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 被使用者
	CardId         uint32 `protobuf:"varint,3,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                           // 此时，只有使用者能看到这个id，其他人都是0
}

func (x *UseShiTanToc) Reset() {
	*x = UseShiTanToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseShiTanToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseShiTanToc) ProtoMessage() {}

func (x *UseShiTanToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseShiTanToc.ProtoReflect.Descriptor instead.
func (*UseShiTanToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{8}
}

func (x *UseShiTanToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseShiTanToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *UseShiTanToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

// 向被试探者展示试探，并等待回应
type ShowShiTanToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                     // 使用者
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 被使用者
	Card           *Card  `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`                                              // 只有自己是使用者或者被使用者时，这个字段才会有值，否则为null/nil
	WaitingSecond  uint32 `protobuf:"varint,4,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"`      // 读多少秒
	Seq            uint32 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ShowShiTanToc) Reset() {
	*x = ShowShiTanToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowShiTanToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowShiTanToc) ProtoMessage() {}

func (x *ShowShiTanToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowShiTanToc.ProtoReflect.Descriptor instead.
func (*ShowShiTanToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{9}
}

func (x *ShowShiTanToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *ShowShiTanToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *ShowShiTanToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *ShowShiTanToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *ShowShiTanToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 被试探者执行试探
type ExecuteShiTanTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId []uint32 `protobuf:"varint,1,rep,packed,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 摸牌或者弃牌但是没牌，就发送空数组。有牌弃就发送弃的牌的id。
	Seq    uint32   `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ExecuteShiTanTos) Reset() {
	*x = ExecuteShiTanTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteShiTanTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteShiTanTos) ProtoMessage() {}

func (x *ExecuteShiTanTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteShiTanTos.ProtoReflect.Descriptor instead.
func (*ExecuteShiTanTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteShiTanTos) GetCardId() []uint32 {
	if x != nil {
		return x.CardId
	}
	return nil
}

func (x *ExecuteShiTanTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ExecuteShiTanToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`         // 被试探者
	IsDrawCard bool   `protobuf:"varint,2,opt,name=is_draw_card,json=isDrawCard,proto3" json:"is_draw_card,omitempty"` // 若他选择了摸牌，则为true。（摸了牌和弃了牌是另外的协议）
}

func (x *ExecuteShiTanToc) Reset() {
	*x = ExecuteShiTanToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteShiTanToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteShiTanToc) ProtoMessage() {}

func (x *ExecuteShiTanToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteShiTanToc.ProtoReflect.Descriptor instead.
func (*ExecuteShiTanToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteShiTanToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *ExecuteShiTanToc) GetIsDrawCard() bool {
	if x != nil {
		return x.IsDrawCard
	}
	return false
}

// 通知客户端，牌堆的剩余数量
type SyncDeckNumToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num      uint32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`           // 剩余数量
	Shuffled bool   `protobuf:"varint,2,opt,name=shuffled,proto3" json:"shuffled,omitempty"` // 是否发生了洗牌
}

func (x *SyncDeckNumToc) Reset() {
	*x = SyncDeckNumToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDeckNumToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDeckNumToc) ProtoMessage() {}

func (x *SyncDeckNumToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDeckNumToc.ProtoReflect.Descriptor instead.
func (*SyncDeckNumToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{12}
}

func (x *SyncDeckNumToc) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SyncDeckNumToc) GetShuffled() bool {
	if x != nil {
		return x.Shuffled
	}
	return false
}

// 通知客户端，牌从谁的手牌被弃掉
type DiscardCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Cards    []*Card `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *DiscardCardToc) Reset() {
	*x = DiscardCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardCardToc) ProtoMessage() {}

func (x *DiscardCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardCardToc.ProtoReflect.Descriptor instead.
func (*DiscardCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{13}
}

func (x *DiscardCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *DiscardCardToc) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 通知客户端，到谁的哪个阶段了
type NotifyPhaseToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPlayerId uint32    `protobuf:"varint,1,opt,name=current_player_id,json=currentPlayerId,proto3" json:"current_player_id,omitempty"`             // 当前回合玩家
	CurrentPhase    Phase     `protobuf:"varint,2,opt,name=current_phase,json=currentPhase,proto3,enum=Phase" json:"current_phase,omitempty"`             // 当前阶段
	MessagePlayerId uint32    `protobuf:"varint,3,opt,name=message_player_id,json=messagePlayerId,proto3" json:"message_player_id,omitempty"`             // 情报在谁面前（只有传递、争夺、接收阶段有效）
	MessageCardDir  Direction `protobuf:"varint,4,opt,name=message_card_dir,json=messageCardDir,proto3,enum=Direction" json:"message_card_dir,omitempty"` // 情报传递方向（只有传递、争夺、接收阶段有效）
	MessageCard     *Card     `protobuf:"bytes,5,opt,name=message_card,json=messageCard,proto3" json:"message_card,omitempty"`                            // 在某些情况下，正在传递的情报应该正面向上，这时候就应该有这个字段
	WaitingPlayerId uint32    `protobuf:"varint,6,opt,name=waiting_player_id,json=waitingPlayerId,proto3" json:"waiting_player_id,omitempty"`             // 读秒的玩家ID
	WaitingSecond   uint32    `protobuf:"varint,7,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"`                     // 读多少秒
	Seq             uint32    `protobuf:"varint,8,opt,name=seq,proto3" json:"seq,omitempty"`                                                              // 只有当自己需要读秒时，这个字段才有值
}

func (x *NotifyPhaseToc) Reset() {
	*x = NotifyPhaseToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyPhaseToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyPhaseToc) ProtoMessage() {}

func (x *NotifyPhaseToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyPhaseToc.ProtoReflect.Descriptor instead.
func (*NotifyPhaseToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{14}
}

func (x *NotifyPhaseToc) GetCurrentPlayerId() uint32 {
	if x != nil {
		return x.CurrentPlayerId
	}
	return 0
}

func (x *NotifyPhaseToc) GetCurrentPhase() Phase {
	if x != nil {
		return x.CurrentPhase
	}
	return Phase_Draw_Phase
}

func (x *NotifyPhaseToc) GetMessagePlayerId() uint32 {
	if x != nil {
		return x.MessagePlayerId
	}
	return 0
}

func (x *NotifyPhaseToc) GetMessageCardDir() Direction {
	if x != nil {
		return x.MessageCardDir
	}
	return Direction_Up
}

func (x *NotifyPhaseToc) GetMessageCard() *Card {
	if x != nil {
		return x.MessageCard
	}
	return nil
}

func (x *NotifyPhaseToc) GetWaitingPlayerId() uint32 {
	if x != nil {
		return x.WaitingPlayerId
	}
	return 0
}

func (x *NotifyPhaseToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *NotifyPhaseToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 请求结束出牌阶段，进入情报传递阶段
type EndMainPhaseTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *EndMainPhaseTos) Reset() {
	*x = EndMainPhaseTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMainPhaseTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMainPhaseTos) ProtoMessage() {}

func (x *EndMainPhaseTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMainPhaseTos.ProtoReflect.Descriptor instead.
func (*EndMainPhaseTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{15}
}

func (x *EndMainPhaseTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 请求使用利诱
type UseLiYouTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 卡牌ID
	PlayerId uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Seq      uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseLiYouTos) Reset() {
	*x = UseLiYouTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseLiYouTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseLiYouTos) ProtoMessage() {}

func (x *UseLiYouTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseLiYouTos.ProtoReflect.Descriptor instead.
func (*UseLiYouTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{16}
}

func (x *UseLiYouTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseLiYouTos) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseLiYouTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知客户端使用利诱的结果
type UseLiYouToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                     // 使用者
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 被使用者
	LiYouCard      *Card  `protobuf:"bytes,3,opt,name=li_you_card,json=liYouCard,proto3" json:"li_you_card,omitempty"`                 // 使用的这张利诱牌
	MessageCard    *Card  `protobuf:"bytes,4,opt,name=message_card,json=messageCard,proto3" json:"message_card,omitempty"`             // 利诱翻出来的牌。如果牌堆和弃牌堆全用完了，则为null/nil
	JoinIntoHand   bool   `protobuf:"varint,5,opt,name=join_into_hand,json=joinIntoHand,proto3" json:"join_into_hand,omitempty"`       // 是否改为加入使用者手牌
}

func (x *UseLiYouToc) Reset() {
	*x = UseLiYouToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseLiYouToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseLiYouToc) ProtoMessage() {}

func (x *UseLiYouToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseLiYouToc.ProtoReflect.Descriptor instead.
func (*UseLiYouToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{17}
}

func (x *UseLiYouToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseLiYouToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *UseLiYouToc) GetLiYouCard() *Card {
	if x != nil {
		return x.LiYouCard
	}
	return nil
}

func (x *UseLiYouToc) GetMessageCard() *Card {
	if x != nil {
		return x.MessageCard
	}
	return nil
}

func (x *UseLiYouToc) GetJoinIntoHand() bool {
	if x != nil {
		return x.JoinIntoHand
	}
	return false
}

// 请求使用平衡
type UsePingHengTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 卡牌ID
	PlayerId uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Seq      uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UsePingHengTos) Reset() {
	*x = UsePingHengTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsePingHengTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsePingHengTos) ProtoMessage() {}

func (x *UsePingHengTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsePingHengTos.ProtoReflect.Descriptor instead.
func (*UsePingHengTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{18}
}

func (x *UsePingHengTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UsePingHengTos) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UsePingHengTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知客户端使用利诱的结果
type UsePingHengToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                     // 使用者
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 被使用者
	PingHengCard   *Card  `protobuf:"bytes,3,opt,name=ping_heng_card,json=pingHengCard,proto3" json:"ping_heng_card,omitempty"`        // 使用的这张利诱牌
}

func (x *UsePingHengToc) Reset() {
	*x = UsePingHengToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsePingHengToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsePingHengToc) ProtoMessage() {}

func (x *UsePingHengToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsePingHengToc.ProtoReflect.Descriptor instead.
func (*UsePingHengToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{19}
}

func (x *UsePingHengToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UsePingHengToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *UsePingHengToc) GetPingHengCard() *Card {
	if x != nil {
		return x.PingHengCard
	}
	return nil
}

// 请求使用平衡
type UseWeiBiTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   uint32   `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 卡牌ID
	PlayerId uint32   `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	WantType CardType `protobuf:"varint,3,opt,name=want_type,json=wantType,proto3,enum=CardType" json:"want_type,omitempty"` // 声明的卡牌类型（截获/误导/调包/澄清）
	Seq      uint32   `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseWeiBiTos) Reset() {
	*x = UseWeiBiTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseWeiBiTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseWeiBiTos) ProtoMessage() {}

func (x *UseWeiBiTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseWeiBiTos.ProtoReflect.Descriptor instead.
func (*UseWeiBiTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{20}
}

func (x *UseWeiBiTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseWeiBiTos) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseWeiBiTos) GetWantType() CardType {
	if x != nil {
		return x.WantType
	}
	return CardType_Cheng_Qing
}

func (x *UseWeiBiTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 威逼等待给牌
type WeiBiWaitForGiveCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card           *Card    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"` // 使用的那张威逼卡牌
	PlayerId       uint32   `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32   `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	WantType       CardType `protobuf:"varint,4,opt,name=want_type,json=wantType,proto3,enum=CardType" json:"want_type,omitempty"`  // 声明的卡牌类型（截获/误导/调包/澄清）
	WaitingSecond  uint32   `protobuf:"varint,5,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"` // 读多少秒
	Seq            uint32   `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *WeiBiWaitForGiveCardToc) Reset() {
	*x = WeiBiWaitForGiveCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeiBiWaitForGiveCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeiBiWaitForGiveCardToc) ProtoMessage() {}

func (x *WeiBiWaitForGiveCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeiBiWaitForGiveCardToc.ProtoReflect.Descriptor instead.
func (*WeiBiWaitForGiveCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{21}
}

func (x *WeiBiWaitForGiveCardToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *WeiBiWaitForGiveCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *WeiBiWaitForGiveCardToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *WeiBiWaitForGiveCardToc) GetWantType() CardType {
	if x != nil {
		return x.WantType
	}
	return CardType_Cheng_Qing
}

func (x *WeiBiWaitForGiveCardToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *WeiBiWaitForGiveCardToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 威逼给牌
type WeiBiGiveCardTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 给出去的卡牌ID
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *WeiBiGiveCardTos) Reset() {
	*x = WeiBiGiveCardTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeiBiGiveCardTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeiBiGiveCardTos) ProtoMessage() {}

func (x *WeiBiGiveCardTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeiBiGiveCardTos.ProtoReflect.Descriptor instead.
func (*WeiBiGiveCardTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{22}
}

func (x *WeiBiGiveCardTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *WeiBiGiveCardTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人威逼给牌
type WeiBiGiveCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	Card           *Card  `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"` // 给出去的卡牌
}

func (x *WeiBiGiveCardToc) Reset() {
	*x = WeiBiGiveCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeiBiGiveCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeiBiGiveCardToc) ProtoMessage() {}

func (x *WeiBiGiveCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeiBiGiveCardToc.ProtoReflect.Descriptor instead.
func (*WeiBiGiveCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{23}
}

func (x *WeiBiGiveCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *WeiBiGiveCardToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *WeiBiGiveCardToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

// 通知所有人威逼的牌没有，展示所有手牌
type WeiBiShowHandCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card           *Card    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"` // 使用的那张威逼卡牌
	PlayerId       uint32   `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	WantType       CardType `protobuf:"varint,3,opt,name=want_type,json=wantType,proto3,enum=CardType" json:"want_type,omitempty"` // 声明的卡牌类型（截获/误导/调包/澄清）
	TargetPlayerId uint32   `protobuf:"varint,4,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	Cards          []*Card  `protobuf:"bytes,5,rep,name=cards,proto3" json:"cards,omitempty"` // 展示所有手牌，只有使用者能看到，其他人收到的都是空数组
}

func (x *WeiBiShowHandCardToc) Reset() {
	*x = WeiBiShowHandCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeiBiShowHandCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeiBiShowHandCardToc) ProtoMessage() {}

func (x *WeiBiShowHandCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeiBiShowHandCardToc.ProtoReflect.Descriptor instead.
func (*WeiBiShowHandCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{24}
}

func (x *WeiBiShowHandCardToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *WeiBiShowHandCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *WeiBiShowHandCardToc) GetWantType() CardType {
	if x != nil {
		return x.WantType
	}
	return CardType_Cheng_Qing
}

func (x *WeiBiShowHandCardToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *WeiBiShowHandCardToc) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 请求使用澄清
type UseChengQingTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId       uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 卡牌ID
	PlayerId     uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetCardId uint32 `protobuf:"varint,3,opt,name=target_card_id,json=targetCardId,proto3" json:"target_card_id,omitempty"`
	Seq          uint32 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseChengQingTos) Reset() {
	*x = UseChengQingTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseChengQingTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseChengQingTos) ProtoMessage() {}

func (x *UseChengQingTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseChengQingTos.ProtoReflect.Descriptor instead.
func (*UseChengQingTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{25}
}

func (x *UseChengQingTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseChengQingTos) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseChengQingTos) GetTargetCardId() uint32 {
	if x != nil {
		return x.TargetCardId
	}
	return 0
}

func (x *UseChengQingTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人澄清
type UseChengQingToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card           *Card  `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	PlayerId       uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	TargetCardId   uint32 `protobuf:"varint,4,opt,name=target_card_id,json=targetCardId,proto3" json:"target_card_id,omitempty"`
}

func (x *UseChengQingToc) Reset() {
	*x = UseChengQingToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseChengQingToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseChengQingToc) ProtoMessage() {}

func (x *UseChengQingToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseChengQingToc.ProtoReflect.Descriptor instead.
func (*UseChengQingToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{26}
}

func (x *UseChengQingToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *UseChengQingToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseChengQingToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *UseChengQingToc) GetTargetCardId() uint32 {
	if x != nil {
		return x.TargetCardId
	}
	return 0
}

// 请求传情报
type SendMessageCardTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId         uint32    `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	TargetPlayerId uint32    `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	LockPlayerId   []uint32  `protobuf:"varint,3,rep,packed,name=lock_player_id,json=lockPlayerId,proto3" json:"lock_player_id,omitempty"`
	CardDir        Direction `protobuf:"varint,4,opt,name=card_dir,json=cardDir,proto3,enum=Direction" json:"card_dir,omitempty"`
	Seq            uint32    `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SendMessageCardTos) Reset() {
	*x = SendMessageCardTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageCardTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageCardTos) ProtoMessage() {}

func (x *SendMessageCardTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageCardTos.ProtoReflect.Descriptor instead.
func (*SendMessageCardTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{27}
}

func (x *SendMessageCardTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SendMessageCardTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SendMessageCardTos) GetLockPlayerId() []uint32 {
	if x != nil {
		return x.LockPlayerId
	}
	return nil
}

func (x *SendMessageCardTos) GetCardDir() Direction {
	if x != nil {
		return x.CardDir
	}
	return Direction_Up
}

func (x *SendMessageCardTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人传情报
type SendMessageCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId         uint32    `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                               // 只有传出者能看到这个字段
	PlayerId       uint32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                         // 传出者
	TargetPlayerId uint32    `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`     // 目标
	LockPlayerIds  []uint32  `protobuf:"varint,4,rep,packed,name=lock_player_ids,json=lockPlayerIds,proto3" json:"lock_player_ids,omitempty"` // 被锁定的玩家ID
	CardDir        Direction `protobuf:"varint,5,opt,name=card_dir,json=cardDir,proto3,enum=Direction" json:"card_dir,omitempty"`             // 传递的方向
}

func (x *SendMessageCardToc) Reset() {
	*x = SendMessageCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageCardToc) ProtoMessage() {}

func (x *SendMessageCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageCardToc.ProtoReflect.Descriptor instead.
func (*SendMessageCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{28}
}

func (x *SendMessageCardToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SendMessageCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SendMessageCardToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SendMessageCardToc) GetLockPlayerIds() []uint32 {
	if x != nil {
		return x.LockPlayerIds
	}
	return nil
}

func (x *SendMessageCardToc) GetCardDir() Direction {
	if x != nil {
		return x.CardDir
	}
	return Direction_Up
}

// 选择是否接收情报
type ChooseWhetherReceiveTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receive bool   `protobuf:"varint,1,opt,name=receive,proto3" json:"receive,omitempty"`
	Seq     uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ChooseWhetherReceiveTos) Reset() {
	*x = ChooseWhetherReceiveTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseWhetherReceiveTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseWhetherReceiveTos) ProtoMessage() {}

func (x *ChooseWhetherReceiveTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseWhetherReceiveTos.ProtoReflect.Descriptor instead.
func (*ChooseWhetherReceiveTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{29}
}

func (x *ChooseWhetherReceiveTos) GetReceive() bool {
	if x != nil {
		return x.Receive
	}
	return false
}

func (x *ChooseWhetherReceiveTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人选择要接收情报（只有选择要收时有这条协议）
type ChooseReceiveToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 接收者
}

func (x *ChooseReceiveToc) Reset() {
	*x = ChooseReceiveToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseReceiveToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseReceiveToc) ProtoMessage() {}

func (x *ChooseReceiveToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseReceiveToc.ProtoReflect.Descriptor instead.
func (*ChooseReceiveToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{30}
}

func (x *ChooseReceiveToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 争夺阶段，轮到自己，选择什么都不出
type EndFightPhaseTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *EndFightPhaseTos) Reset() {
	*x = EndFightPhaseTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndFightPhaseTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndFightPhaseTos) ProtoMessage() {}

func (x *EndFightPhaseTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndFightPhaseTos.ProtoReflect.Descriptor instead.
func (*EndFightPhaseTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{31}
}

func (x *EndFightPhaseTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知客户端谁死亡了
type NotifyDieToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	LoseGame bool   `protobuf:"varint,2,opt,name=lose_game,json=loseGame,proto3" json:"lose_game,omitempty"` // true表示因为轮到传递情报时没情报传了导致输掉游戏
}

func (x *NotifyDieToc) Reset() {
	*x = NotifyDieToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDieToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDieToc) ProtoMessage() {}

func (x *NotifyDieToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDieToc.ProtoReflect.Descriptor instead.
func (*NotifyDieToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{32}
}

func (x *NotifyDieToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *NotifyDieToc) GetLoseGame() bool {
	if x != nil {
		return x.LoseGame
	}
	return false
}

// 通知谁获胜了
type NotifyWinnerToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeclarePlayerIds []uint32     `protobuf:"varint,1,rep,packed,name=declare_player_ids,json=declarePlayerIds,proto3" json:"declare_player_ids,omitempty"`
	WinnerIds        []uint32     `protobuf:"varint,2,rep,packed,name=winner_ids,json=winnerIds,proto3" json:"winner_ids,omitempty"`
	Identity         []Color      `protobuf:"varint,3,rep,packed,name=identity,proto3,enum=Color" json:"identity,omitempty"`                               // 所有人的身份，自己的下标为0，右手第一个人的下标为1
	SecretTasks      []SecretTask `protobuf:"varint,4,rep,packed,name=secret_tasks,json=secretTasks,proto3,enum=SecretTask" json:"secret_tasks,omitempty"` // 神秘人任务，下标同上一一对应，不是神秘人的那个位置会空出来
}

func (x *NotifyWinnerToc) Reset() {
	*x = NotifyWinnerToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyWinnerToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyWinnerToc) ProtoMessage() {}

func (x *NotifyWinnerToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyWinnerToc.ProtoReflect.Descriptor instead.
func (*NotifyWinnerToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{33}
}

func (x *NotifyWinnerToc) GetDeclarePlayerIds() []uint32 {
	if x != nil {
		return x.DeclarePlayerIds
	}
	return nil
}

func (x *NotifyWinnerToc) GetWinnerIds() []uint32 {
	if x != nil {
		return x.WinnerIds
	}
	return nil
}

func (x *NotifyWinnerToc) GetIdentity() []Color {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *NotifyWinnerToc) GetSecretTasks() []SecretTask {
	if x != nil {
		return x.SecretTasks
	}
	return nil
}

// 濒死求澄清
type WaitForChengQingToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiePlayerId     uint32 `protobuf:"varint,1,opt,name=die_player_id,json=diePlayerId,proto3" json:"die_player_id,omitempty"`             // 谁濒死
	WaitingPlayerId uint32 `protobuf:"varint,2,opt,name=waiting_player_id,json=waitingPlayerId,proto3" json:"waiting_player_id,omitempty"` // 读秒的玩家ID
	WaitingSecond   uint32 `protobuf:"varint,3,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"`         // 读多少秒
	Seq             uint32 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *WaitForChengQingToc) Reset() {
	*x = WaitForChengQingToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForChengQingToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForChengQingToc) ProtoMessage() {}

func (x *WaitForChengQingToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForChengQingToc.ProtoReflect.Descriptor instead.
func (*WaitForChengQingToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{34}
}

func (x *WaitForChengQingToc) GetDiePlayerId() uint32 {
	if x != nil {
		return x.DiePlayerId
	}
	return 0
}

func (x *WaitForChengQingToc) GetWaitingPlayerId() uint32 {
	if x != nil {
		return x.WaitingPlayerId
	}
	return 0
}

func (x *WaitForChengQingToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *WaitForChengQingToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 是否使用澄清
type ChengQingSaveDieTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Use          bool   `protobuf:"varint,1,opt,name=use,proto3" json:"use,omitempty"`                                         // 是否使用澄清
	CardId       uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                     // 使用的澄清卡牌ID
	TargetCardId uint32 `protobuf:"varint,3,opt,name=target_card_id,json=targetCardId,proto3" json:"target_card_id,omitempty"` // 目标卡牌ID
	Seq          uint32 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *ChengQingSaveDieTos) Reset() {
	*x = ChengQingSaveDieTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChengQingSaveDieTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChengQingSaveDieTos) ProtoMessage() {}

func (x *ChengQingSaveDieTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChengQingSaveDieTos.ProtoReflect.Descriptor instead.
func (*ChengQingSaveDieTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{35}
}

func (x *ChengQingSaveDieTos) GetUse() bool {
	if x != nil {
		return x.Use
	}
	return false
}

func (x *ChengQingSaveDieTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ChengQingSaveDieTos) GetTargetCardId() uint32 {
	if x != nil {
		return x.TargetCardId
	}
	return 0
}

func (x *ChengQingSaveDieTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 等待死亡时给三张牌
type WaitForDieGiveCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	WaitingSecond uint32 `protobuf:"varint,2,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"` // 读多少秒
	Seq           uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *WaitForDieGiveCardToc) Reset() {
	*x = WaitForDieGiveCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForDieGiveCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForDieGiveCardToc) ProtoMessage() {}

func (x *WaitForDieGiveCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForDieGiveCardToc.ProtoReflect.Descriptor instead.
func (*WaitForDieGiveCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{36}
}

func (x *WaitForDieGiveCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *WaitForDieGiveCardToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *WaitForDieGiveCardToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type DieGiveCardTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId uint32   `protobuf:"varint,1,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 不给就填0
	CardId         []uint32 `protobuf:"varint,2,rep,packed,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                    // 不给就填空数组
	Seq            uint32   `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *DieGiveCardTos) Reset() {
	*x = DieGiveCardTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DieGiveCardTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DieGiveCardTos) ProtoMessage() {}

func (x *DieGiveCardTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DieGiveCardTos.ProtoReflect.Descriptor instead.
func (*DieGiveCardTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{37}
}

func (x *DieGiveCardTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *DieGiveCardTos) GetCardId() []uint32 {
	if x != nil {
		return x.CardId
	}
	return nil
}

func (x *DieGiveCardTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type NotifyDieGiveCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32  `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 不给就填0
	Card           []*Card `protobuf:"bytes,3,rep,name=card,proto3" json:"card,omitempty"`                                              // 不给就填空数组
	CardCount      uint32  `protobuf:"varint,4,opt,name=card_count,json=cardCount,proto3" json:"card_count,omitempty"`                  // 其它人看不到牌就填这个
}

func (x *NotifyDieGiveCardToc) Reset() {
	*x = NotifyDieGiveCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDieGiveCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDieGiveCardToc) ProtoMessage() {}

func (x *NotifyDieGiveCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDieGiveCardToc.ProtoReflect.Descriptor instead.
func (*NotifyDieGiveCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{38}
}

func (x *NotifyDieGiveCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *NotifyDieGiveCardToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *NotifyDieGiveCardToc) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *NotifyDieGiveCardToc) GetCardCount() uint32 {
	if x != nil {
		return x.CardCount
	}
	return 0
}

// 使用破译
type UsePoYiTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 用的那张破译牌
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UsePoYiTos) Reset() {
	*x = UsePoYiTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsePoYiTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsePoYiTos) ProtoMessage() {}

func (x *UsePoYiTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsePoYiTos.ProtoReflect.Descriptor instead.
func (*UsePoYiTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{39}
}

func (x *UsePoYiTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UsePoYiTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人使用破译，并询问是否翻开并摸一张牌（只有黑情报才能翻开）
type UsePoYiToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card          *Card  `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`                                  // 用的那张破译牌
	PlayerId      uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`         // 使用者
	MessageCard   *Card  `protobuf:"bytes,3,opt,name=message_card,json=messageCard,proto3" json:"message_card,omitempty"` // 只有使用者才能看到这张情报
	WaitingSecond uint32 `protobuf:"varint,4,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"`
	Seq           uint32 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UsePoYiToc) Reset() {
	*x = UsePoYiToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsePoYiToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsePoYiToc) ProtoMessage() {}

func (x *UsePoYiToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsePoYiToc.ProtoReflect.Descriptor instead.
func (*UsePoYiToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{40}
}

func (x *UsePoYiToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *UsePoYiToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UsePoYiToc) GetMessageCard() *Card {
	if x != nil {
		return x.MessageCard
	}
	return nil
}

func (x *UsePoYiToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *UsePoYiToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type PoYiShowTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show bool   `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"` // 是否翻开并摸一张牌（只有黑情报才能翻开）
	Seq  uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *PoYiShowTos) Reset() {
	*x = PoYiShowTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoYiShowTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoYiShowTos) ProtoMessage() {}

func (x *PoYiShowTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoYiShowTos.ProtoReflect.Descriptor instead.
func (*PoYiShowTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{41}
}

func (x *PoYiShowTos) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *PoYiShowTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type PoYiShowToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`         // 使用者
	Show        bool   `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`                                 // 是否翻开并摸一张牌（只有黑情报才能翻开）（摸牌直接走摸牌协议）
	MessageCard *Card  `protobuf:"bytes,3,opt,name=message_card,json=messageCard,proto3" json:"message_card,omitempty"` // 只有选择翻开时，才会显示这个情报
}

func (x *PoYiShowToc) Reset() {
	*x = PoYiShowToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoYiShowToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoYiShowToc) ProtoMessage() {}

func (x *PoYiShowToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoYiShowToc.ProtoReflect.Descriptor instead.
func (*PoYiShowToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{42}
}

func (x *PoYiShowToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PoYiShowToc) GetShow() bool {
	if x != nil {
		return x.Show
	}
	return false
}

func (x *PoYiShowToc) GetMessageCard() *Card {
	if x != nil {
		return x.MessageCard
	}
	return nil
}

// 使用截获
type UseJieHuoTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 用的那张截获牌
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseJieHuoTos) Reset() {
	*x = UseJieHuoTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseJieHuoTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseJieHuoTos) ProtoMessage() {}

func (x *UseJieHuoTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseJieHuoTos.ProtoReflect.Descriptor instead.
func (*UseJieHuoTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{43}
}

func (x *UseJieHuoTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseJieHuoTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人使用截获
type UseJieHuoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card     *Card  `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`                          // 用的那张截获牌
	PlayerId uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 使用者
}

func (x *UseJieHuoToc) Reset() {
	*x = UseJieHuoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseJieHuoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseJieHuoToc) ProtoMessage() {}

func (x *UseJieHuoToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseJieHuoToc.ProtoReflect.Descriptor instead.
func (*UseJieHuoToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{44}
}

func (x *UseJieHuoToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *UseJieHuoToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 使用调包
type UseDiaoBaoTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"` // 用的那张截获牌
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseDiaoBaoTos) Reset() {
	*x = UseDiaoBaoTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseDiaoBaoTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseDiaoBaoTos) ProtoMessage() {}

func (x *UseDiaoBaoTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseDiaoBaoTos.ProtoReflect.Descriptor instead.
func (*UseDiaoBaoTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{45}
}

func (x *UseDiaoBaoTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseDiaoBaoTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人使用调包
type UseDiaoBaoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId         uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                          // 用的那张调包牌（但是调包后，这张调包会面朝下代替原情报继续传递），只有使用调包的人能收到这个值
	OldMessageCard *Card  `protobuf:"bytes,2,opt,name=old_message_card,json=oldMessageCard,proto3" json:"old_message_card,omitempty"` // 被弃掉的那张原来的情报
	PlayerId       uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                    // 使用者
}

func (x *UseDiaoBaoToc) Reset() {
	*x = UseDiaoBaoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseDiaoBaoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseDiaoBaoToc) ProtoMessage() {}

func (x *UseDiaoBaoToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseDiaoBaoToc.ProtoReflect.Descriptor instead.
func (*UseDiaoBaoToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{46}
}

func (x *UseDiaoBaoToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseDiaoBaoToc) GetOldMessageCard() *Card {
	if x != nil {
		return x.OldMessageCard
	}
	return nil
}

func (x *UseDiaoBaoToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 使用误导
type UseWuDaoTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId         uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                           // 用的那张误导牌
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 误导的目标
	Seq            uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *UseWuDaoTos) Reset() {
	*x = UseWuDaoTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseWuDaoTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseWuDaoTos) ProtoMessage() {}

func (x *UseWuDaoTos) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseWuDaoTos.ProtoReflect.Descriptor instead.
func (*UseWuDaoTos) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{47}
}

func (x *UseWuDaoTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *UseWuDaoTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *UseWuDaoTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 通知所有人使用误导
type UseWuDaoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card           *Card  `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`                                              // 用的那张误导牌
	PlayerId       uint32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                     // 使用者
	TargetPlayerId uint32 `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"` // 误导的目标
}

func (x *UseWuDaoToc) Reset() {
	*x = UseWuDaoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseWuDaoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseWuDaoToc) ProtoMessage() {}

func (x *UseWuDaoToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseWuDaoToc.ProtoReflect.Descriptor instead.
func (*UseWuDaoToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{48}
}

func (x *UseWuDaoToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *UseWuDaoToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *UseWuDaoToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

var File_fengsheng_proto protoreflect.FileDescriptor

var file_fengsheng_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x65, 0x6e, 0x67, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a,
	0x0d, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x73, 0x22, 0x3f,
	0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2c, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x6f,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x12, 0x27, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x77, 0x68, 0x6f, 0x5f, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x77, 0x68, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x80, 0x01,
	0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x06, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x76, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f,
	0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0x71, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x5f, 0x74,
	0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x40, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x54, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x22, 0x41,
	0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x74, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x64, 0x22, 0x4c, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22,
	0xdc, 0x02, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x6f, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x70, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x10, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x12,
	0x28, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x26,
	0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x58, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x22, 0xce, 0x01, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x5f, 0x79, 0x6f, 0x75, 0x5f,
	0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x69,
	0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x59, 0x6f, 0x75, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x28, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x6f, 0x48, 0x61, 0x6e,
	0x64, 0x22, 0x5b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x87,
	0x01, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67,
	0x48, 0x65, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x5f, 0x77, 0x65, 0x69, 0x5f, 0x62, 0x69, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xe3, 0x01, 0x0a,
	0x1d, 0x77, 0x65, 0x69, 0x5f, 0x62, 0x69, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x19,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x77, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73,
	0x65, 0x71, 0x22, 0x41, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x5f, 0x62, 0x69, 0x5f, 0x67, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x78, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x5f, 0x62, 0x69, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22,
	0xc3, 0x01, 0x0a, 0x19, 0x77, 0x65, 0x69, 0x5f, 0x62, 0x69, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x19, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x68,
	0x65, 0x6e, 0x67, 0x5f, 0x71, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x6e, 0x67, 0x5f, 0x71, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x63, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xc6, 0x01, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x22, 0x48,
	0x0a, 0x1a, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x31, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x65,
	0x6e, 0x64, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x22, 0x4a, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64,
	0x69, 0x65, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x22, 0xb5, 0x01, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x6e, 0x67, 0x5f, 0x71, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x7c, 0x0a,
	0x17, 0x63, 0x68, 0x65, 0x6e, 0x67, 0x5f, 0x71, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x64, 0x69, 0x65, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x72, 0x0a, 0x1a, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x5f, 0x67, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22,
	0x68, 0x0a, 0x11, 0x64, 0x69, 0x65, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x69, 0x65, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x5f, 0x79, 0x69, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x5f, 0x79,
	0x69, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x22, 0x36, 0x0a, 0x0e, 0x70, 0x6f, 0x5f, 0x79, 0x69, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x6b, 0x0a, 0x0e, 0x70, 0x6f, 0x5f, 0x79,
	0x69, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x3c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6a, 0x69, 0x65,
	0x5f, 0x68, 0x75, 0x6f, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0x49, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6a, 0x69, 0x65, 0x5f, 0x68,
	0x75, 0x6f, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x6f, 0x5f, 0x62, 0x61, 0x6f, 0x5f, 0x74,
	0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x79, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x6f, 0x5f, 0x62, 0x61, 0x6f, 0x5f, 0x74, 0x6f,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x6f, 0x6c,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x6f, 0x6c, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f,
	0x77, 0x75, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22,
	0x72, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x75, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x74, 0x6f,
	0x63, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x2a, 0x71, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x72, 0x61, 0x77, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x65, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x10, 0x05, 0x2a, 0x81, 0x01, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x6e, 0x67, 0x5f, 0x51, 0x69,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x5f, 0x54, 0x61, 0x6e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x5f, 0x42, 0x69, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x69, 0x5f, 0x59, 0x6f, 0x75, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x69, 0x6e,
	0x67, 0x5f, 0x48, 0x65, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x5f, 0x59,
	0x69, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x69, 0x65, 0x5f, 0x48, 0x75, 0x6f, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x61, 0x6f, 0x5f, 0x42, 0x61, 0x6f, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x75, 0x5f, 0x44, 0x61, 0x6f, 0x10, 0x08, 0x2a, 0x25, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x65, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x2a, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x74, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fengsheng_proto_rawDescOnce sync.Once
	file_fengsheng_proto_rawDescData = file_fengsheng_proto_rawDesc
)

func file_fengsheng_proto_rawDescGZIP() []byte {
	file_fengsheng_proto_rawDescOnce.Do(func() {
		file_fengsheng_proto_rawDescData = protoimpl.X.CompressGZIP(file_fengsheng_proto_rawDescData)
	})
	return file_fengsheng_proto_rawDescData
}

var file_fengsheng_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_fengsheng_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_fengsheng_proto_goTypes = []interface{}{
	(Phase)(0),                      // 0: phase
	(CardType)(0),                   // 1: card_type
	(Color)(0),                      // 2: color
	(SecretTask)(0),                 // 3: secret_task
	(Direction)(0),                  // 4: direction
	(*GetRoomInfoToc)(nil),          // 5: get_room_info_toc
	(*AddRobotTos)(nil),             // 6: add_robot_tos
	(*JoinRoomToc)(nil),             // 7: join_room_toc
	(*LeaveRoomToc)(nil),            // 8: leave_room_toc
	(*Card)(nil),                    // 9: card
	(*InitToc)(nil),                 // 10: init_toc
	(*AddCardToc)(nil),              // 11: add_card_toc
	(*UseShiTanTos)(nil),            // 12: use_shi_tan_tos
	(*UseShiTanToc)(nil),            // 13: use_shi_tan_toc
	(*ShowShiTanToc)(nil),           // 14: show_shi_tan_toc
	(*ExecuteShiTanTos)(nil),        // 15: execute_shi_tan_tos
	(*ExecuteShiTanToc)(nil),        // 16: execute_shi_tan_toc
	(*SyncDeckNumToc)(nil),          // 17: sync_deck_num_toc
	(*DiscardCardToc)(nil),          // 18: discard_card_toc
	(*NotifyPhaseToc)(nil),          // 19: notify_phase_toc
	(*EndMainPhaseTos)(nil),         // 20: end_main_phase_tos
	(*UseLiYouTos)(nil),             // 21: use_li_you_tos
	(*UseLiYouToc)(nil),             // 22: use_li_you_toc
	(*UsePingHengTos)(nil),          // 23: use_ping_heng_tos
	(*UsePingHengToc)(nil),          // 24: use_ping_heng_toc
	(*UseWeiBiTos)(nil),             // 25: use_wei_bi_tos
	(*WeiBiWaitForGiveCardToc)(nil), // 26: wei_bi_wait_for_give_card_toc
	(*WeiBiGiveCardTos)(nil),        // 27: wei_bi_give_card_tos
	(*WeiBiGiveCardToc)(nil),        // 28: wei_bi_give_card_toc
	(*WeiBiShowHandCardToc)(nil),    // 29: wei_bi_show_hand_card_toc
	(*UseChengQingTos)(nil),         // 30: use_cheng_qing_tos
	(*UseChengQingToc)(nil),         // 31: use_cheng_qing_toc
	(*SendMessageCardTos)(nil),      // 32: send_message_card_tos
	(*SendMessageCardToc)(nil),      // 33: send_message_card_toc
	(*ChooseWhetherReceiveTos)(nil), // 34: choose_whether_receive_tos
	(*ChooseReceiveToc)(nil),        // 35: choose_receive_toc
	(*EndFightPhaseTos)(nil),        // 36: end_fight_phase_tos
	(*NotifyDieToc)(nil),            // 37: notify_die_toc
	(*NotifyWinnerToc)(nil),         // 38: notify_winner_toc
	(*WaitForChengQingToc)(nil),     // 39: wait_for_cheng_qing_toc
	(*ChengQingSaveDieTos)(nil),     // 40: cheng_qing_save_die_tos
	(*WaitForDieGiveCardToc)(nil),   // 41: wait_for_die_give_card_toc
	(*DieGiveCardTos)(nil),          // 42: die_give_card_tos
	(*NotifyDieGiveCardToc)(nil),    // 43: notify_die_give_card_toc
	(*UsePoYiTos)(nil),              // 44: use_po_yi_tos
	(*UsePoYiToc)(nil),              // 45: use_po_yi_toc
	(*PoYiShowTos)(nil),             // 46: po_yi_show_tos
	(*PoYiShowToc)(nil),             // 47: po_yi_show_toc
	(*UseJieHuoTos)(nil),            // 48: use_jie_huo_tos
	(*UseJieHuoToc)(nil),            // 49: use_jie_huo_toc
	(*UseDiaoBaoTos)(nil),           // 50: use_diao_bao_tos
	(*UseDiaoBaoToc)(nil),           // 51: use_diao_bao_toc
	(*UseWuDaoTos)(nil),             // 52: use_wu_dao_tos
	(*UseWuDaoToc)(nil),             // 53: use_wu_dao_toc
}
var file_fengsheng_proto_depIdxs = []int32{
	2,  // 0: card.card_color:type_name -> color
	4,  // 1: card.card_dir:type_name -> direction
	1,  // 2: card.card_type:type_name -> card_type
	2,  // 3: card.who_draw_card:type_name -> color
	2,  // 4: init_toc.identity:type_name -> color
	3,  // 5: init_toc.secret_task:type_name -> secret_task
	9,  // 6: add_card_toc.cards:type_name -> card
	9,  // 7: show_shi_tan_toc.card:type_name -> card
	9,  // 8: discard_card_toc.cards:type_name -> card
	0,  // 9: notify_phase_toc.current_phase:type_name -> phase
	4,  // 10: notify_phase_toc.message_card_dir:type_name -> direction
	9,  // 11: notify_phase_toc.message_card:type_name -> card
	9,  // 12: use_li_you_toc.li_you_card:type_name -> card
	9,  // 13: use_li_you_toc.message_card:type_name -> card
	9,  // 14: use_ping_heng_toc.ping_heng_card:type_name -> card
	1,  // 15: use_wei_bi_tos.want_type:type_name -> card_type
	9,  // 16: wei_bi_wait_for_give_card_toc.card:type_name -> card
	1,  // 17: wei_bi_wait_for_give_card_toc.want_type:type_name -> card_type
	9,  // 18: wei_bi_give_card_toc.card:type_name -> card
	9,  // 19: wei_bi_show_hand_card_toc.card:type_name -> card
	1,  // 20: wei_bi_show_hand_card_toc.want_type:type_name -> card_type
	9,  // 21: wei_bi_show_hand_card_toc.cards:type_name -> card
	9,  // 22: use_cheng_qing_toc.card:type_name -> card
	4,  // 23: send_message_card_tos.card_dir:type_name -> direction
	4,  // 24: send_message_card_toc.card_dir:type_name -> direction
	2,  // 25: notify_winner_toc.identity:type_name -> color
	3,  // 26: notify_winner_toc.secret_tasks:type_name -> secret_task
	9,  // 27: notify_die_give_card_toc.card:type_name -> card
	9,  // 28: use_po_yi_toc.card:type_name -> card
	9,  // 29: use_po_yi_toc.message_card:type_name -> card
	9,  // 30: po_yi_show_toc.message_card:type_name -> card
	9,  // 31: use_jie_huo_toc.card:type_name -> card
	9,  // 32: use_diao_bao_toc.old_message_card:type_name -> card
	9,  // 33: use_wu_dao_toc.card:type_name -> card
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_fengsheng_proto_init() }
func file_fengsheng_proto_init() {
	if File_fengsheng_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fengsheng_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoomInfoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRobotTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRoomToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRoomToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseShiTanTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseShiTanToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowShiTanToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteShiTanTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteShiTanToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDeckNumToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyPhaseToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMainPhaseTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseLiYouTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseLiYouToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsePingHengTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsePingHengToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseWeiBiTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeiBiWaitForGiveCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeiBiGiveCardTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeiBiGiveCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeiBiShowHandCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseChengQingTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseChengQingToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageCardTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseWhetherReceiveTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseReceiveToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndFightPhaseTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDieToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyWinnerToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForChengQingToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChengQingSaveDieTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForDieGiveCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DieGiveCardTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDieGiveCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsePoYiTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsePoYiToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoYiShowTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoYiShowToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseJieHuoTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseJieHuoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseDiaoBaoTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseDiaoBaoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseWuDaoTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseWuDaoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fengsheng_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fengsheng_proto_goTypes,
		DependencyIndexes: file_fengsheng_proto_depIdxs,
		EnumInfos:         file_fengsheng_proto_enumTypes,
		MessageInfos:      file_fengsheng_proto_msgTypes,
	}.Build()
	File_fengsheng_proto = out.File
	file_fengsheng_proto_rawDesc = nil
	file_fengsheng_proto_goTypes = nil
	file_fengsheng_proto_depIdxs = nil
}
