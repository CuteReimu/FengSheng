// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: fengsheng.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardType int32

const (
	CardType_Cheng_Qing CardType = 0 // 澄清
	CardType_Shi_Tan    CardType = 1 // 试探
	CardType_Bi_Po      CardType = 2 // 逼迫
	CardType_Li_You     CardType = 3 // 利诱
	CardType_Ping_Heng  CardType = 4 // 平衡
	CardType_Po_Yi      CardType = 5 // 破译
	CardType_Jie_Huo    CardType = 6 // 截获
	CardType_Diao_Bao   CardType = 7 // 掉包
	CardType_Wu_Dao     CardType = 8 // 误导
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "Cheng_Qing",
		1: "Shi_Tan",
		2: "Bi_Po",
		3: "Li_You",
		4: "Ping_Heng",
		5: "Po_Yi",
		6: "Jie_Huo",
		7: "Diao_Bao",
		8: "Wu_Dao",
	}
	CardType_value = map[string]int32{
		"Cheng_Qing": 0,
		"Shi_Tan":    1,
		"Bi_Po":      2,
		"Li_You":     3,
		"Ping_Heng":  4,
		"Po_Yi":      5,
		"Jie_Huo":    6,
		"Diao_Bao":   7,
		"Wu_Dao":     8,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[0].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[0]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{0}
}

type Color int32

const (
	Color_Black Color = 0 // 对于身份，则是绿色（神秘人）；对于卡牌，则是黑色
	Color_Red   Color = 1 // 红色
	Color_Blue  Color = 2 // 蓝色
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0: "Black",
		1: "Red",
		2: "Blue",
	}
	Color_value = map[string]int32{
		"Black": 0,
		"Red":   1,
		"Blue":  2,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[1].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[1]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	Direction_Up    Direction = 0 // 向上
	Direction_Left  Direction = 1 // 向左
	Direction_Right Direction = 2 // 向右
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "Up",
		1: "Left",
		2: "Right",
	}
	Direction_value = map[string]int32{
		"Up":    0,
		"Left":  1,
		"Right": 2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_fengsheng_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_fengsheng_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{2}
}

// 普通卡牌（除了试探以外）的结构体
type RegularCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId    uint32    `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                            // 卡牌ID
	CardColor []Color   `protobuf:"varint,2,rep,packed,name=card_color,json=cardColor,proto3,enum=Color" json:"card_color,omitempty"` // 卡牌颜色（因为可能有双色卡，所以用了repeated）
	CardDir   Direction `protobuf:"varint,3,opt,name=card_dir,json=cardDir,proto3,enum=Direction" json:"card_dir,omitempty"`          // 卡牌上的箭头方向
	CardType  CardType  `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,enum=CardType" json:"card_type,omitempty"`        // 卡牌类型
}

func (x *RegularCard) Reset() {
	*x = RegularCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularCard) ProtoMessage() {}

func (x *RegularCard) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularCard.ProtoReflect.Descriptor instead.
func (*RegularCard) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{0}
}

func (x *RegularCard) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *RegularCard) GetCardColor() []Color {
	if x != nil {
		return x.CardColor
	}
	return nil
}

func (x *RegularCard) GetCardDir() Direction {
	if x != nil {
		return x.CardDir
	}
	return Direction_Up
}

func (x *RegularCard) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_Cheng_Qing
}

// 试探卡的结构体
type ShiTanCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId      uint32    `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`                                    // 卡牌ID
	CardColor   []Color   `protobuf:"varint,2,rep,packed,name=card_color,json=cardColor,proto3,enum=Color" json:"card_color,omitempty"`         // 卡牌颜色（因为可能有双色卡，所以用了repeated）
	CardDir     Direction `protobuf:"varint,3,opt,name=card_dir,json=cardDir,proto3,enum=Direction" json:"card_dir,omitempty"`                  // 卡牌上的箭头方向
	CardType    CardType  `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,enum=CardType" json:"card_type,omitempty"`                // 卡牌类型
	WhoDrawCard []Color   `protobuf:"varint,5,rep,packed,name=who_draw_card,json=whoDrawCard,proto3,enum=Color" json:"who_draw_card,omitempty"` // 哪个身份的人摸1张牌（那么另外的身份一定是弃1张牌）
}

func (x *ShiTanCard) Reset() {
	*x = ShiTanCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiTanCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiTanCard) ProtoMessage() {}

func (x *ShiTanCard) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiTanCard.ProtoReflect.Descriptor instead.
func (*ShiTanCard) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{1}
}

func (x *ShiTanCard) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *ShiTanCard) GetCardColor() []Color {
	if x != nil {
		return x.CardColor
	}
	return nil
}

func (x *ShiTanCard) GetCardDir() Direction {
	if x != nil {
		return x.CardDir
	}
	return Direction_Up
}

func (x *ShiTanCard) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_Cheng_Qing
}

func (x *ShiTanCard) GetWhoDrawCard() []Color {
	if x != nil {
		return x.WhoDrawCard
	}
	return nil
}

// 通知客户端：初始化游戏
type InitToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCount uint32 `protobuf:"varint,1,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"` // 玩家总人数（包括你）
}

func (x *InitToc) Reset() {
	*x = InitToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitToc) ProtoMessage() {}

func (x *InitToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitToc.ProtoReflect.Descriptor instead.
func (*InitToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{2}
}

func (x *InitToc) GetPlayerCount() uint32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

// 通知客户端：某个玩家摸了一张卡
type AddCardToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId         uint32         `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                           // 自己是0，右手方第一名玩家是1，以此类推
	UnknownCardCount uint32         `protobuf:"varint,2,opt,name=unknown_card_count,json=unknownCardCount,proto3" json:"unknown_card_count,omitempty"` // 背面朝上的牌的数量（用于其它人摸牌，你看不到）
	RegularCards     []*RegularCard `protobuf:"bytes,3,rep,name=regular_cards,json=regularCards,proto3" json:"regular_cards,omitempty"`                // 摸到的普通卡牌（除了试探以外）
	ShiTanCards      []*ShiTanCard  `protobuf:"bytes,4,rep,name=shi_tan_cards,json=shiTanCards,proto3" json:"shi_tan_cards,omitempty"`                 // 摸到的试探卡牌
}

func (x *AddCardToc) Reset() {
	*x = AddCardToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fengsheng_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardToc) ProtoMessage() {}

func (x *AddCardToc) ProtoReflect() protoreflect.Message {
	mi := &file_fengsheng_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardToc.ProtoReflect.Descriptor instead.
func (*AddCardToc) Descriptor() ([]byte, []int) {
	return file_fengsheng_proto_rawDescGZIP(), []int{3}
}

func (x *AddCardToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *AddCardToc) GetUnknownCardCount() uint32 {
	if x != nil {
		return x.UnknownCardCount
	}
	return 0
}

func (x *AddCardToc) GetRegularCards() []*RegularCard {
	if x != nil {
		return x.RegularCards
	}
	return nil
}

func (x *AddCardToc) GetShiTanCards() []*ShiTanCard {
	if x != nil {
		return x.ShiTanCards
	}
	return nil
}

var File_fengsheng_proto protoreflect.FileDescriptor

var file_fengsheng_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x65, 0x6e, 0x67, 0x73, 0x68, 0x65, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x06, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x06, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x77, 0x68, 0x6f, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x0b, 0x77, 0x68, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x22,
	0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc0,
	0x01, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31,
	0x0a, 0x0d, 0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x68, 0x69, 0x5f, 0x74, 0x61, 0x6e, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x54, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x2a, 0x80, 0x01, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x6e, 0x67, 0x5f, 0x51, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x5f, 0x54, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x69, 0x5f, 0x50, 0x6f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x69, 0x5f, 0x59, 0x6f,
	0x75, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x48, 0x65, 0x6e, 0x67,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x5f, 0x59, 0x69, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x4a, 0x69, 0x65, 0x5f, 0x48, 0x75, 0x6f, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69,
	0x61, 0x6f, 0x5f, 0x42, 0x61, 0x6f, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x75, 0x5f, 0x44,
	0x61, 0x6f, 0x10, 0x08, 0x2a, 0x25, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fengsheng_proto_rawDescOnce sync.Once
	file_fengsheng_proto_rawDescData = file_fengsheng_proto_rawDesc
)

func file_fengsheng_proto_rawDescGZIP() []byte {
	file_fengsheng_proto_rawDescOnce.Do(func() {
		file_fengsheng_proto_rawDescData = protoimpl.X.CompressGZIP(file_fengsheng_proto_rawDescData)
	})
	return file_fengsheng_proto_rawDescData
}

var file_fengsheng_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fengsheng_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fengsheng_proto_goTypes = []interface{}{
	(CardType)(0),       // 0: card_type
	(Color)(0),          // 1: color
	(Direction)(0),      // 2: direction
	(*RegularCard)(nil), // 3: regular_card
	(*ShiTanCard)(nil),  // 4: shi_tan_card
	(*InitToc)(nil),     // 5: init_toc
	(*AddCardToc)(nil),  // 6: add_card_toc
}
var file_fengsheng_proto_depIdxs = []int32{
	1, // 0: regular_card.card_color:type_name -> color
	2, // 1: regular_card.card_dir:type_name -> direction
	0, // 2: regular_card.card_type:type_name -> card_type
	1, // 3: shi_tan_card.card_color:type_name -> color
	2, // 4: shi_tan_card.card_dir:type_name -> direction
	0, // 5: shi_tan_card.card_type:type_name -> card_type
	1, // 6: shi_tan_card.who_draw_card:type_name -> color
	3, // 7: add_card_toc.regular_cards:type_name -> regular_card
	4, // 8: add_card_toc.shi_tan_cards:type_name -> shi_tan_card
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_fengsheng_proto_init() }
func file_fengsheng_proto_init() {
	if File_fengsheng_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fengsheng_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiTanCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fengsheng_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fengsheng_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fengsheng_proto_goTypes,
		DependencyIndexes: file_fengsheng_proto_depIdxs,
		EnumInfos:         file_fengsheng_proto_enumTypes,
		MessageInfos:      file_fengsheng_proto_msgTypes,
	}.Build()
	File_fengsheng_proto = out.File
	file_fengsheng_proto_rawDesc = nil
	file_fengsheng_proto_goTypes = nil
	file_fengsheng_proto_depIdxs = nil
}
