// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.4
// source: role.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 毛不拔【奇货可居】：你接收双色情报后，可以从你的情报区选择一张情报加入手牌。
type SkillQiHuoKeJuTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillQiHuoKeJuTos) Reset() {
	*x = SkillQiHuoKeJuTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillQiHuoKeJuTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillQiHuoKeJuTos) ProtoMessage() {}

func (x *SkillQiHuoKeJuTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillQiHuoKeJuTos.ProtoReflect.Descriptor instead.
func (*SkillQiHuoKeJuTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{0}
}

func (x *SkillQiHuoKeJuTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillQiHuoKeJuTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【奇货可居】
type SkillQiHuoKeJuToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	CardId   uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *SkillQiHuoKeJuToc) Reset() {
	*x = SkillQiHuoKeJuToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillQiHuoKeJuToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillQiHuoKeJuToc) ProtoMessage() {}

func (x *SkillQiHuoKeJuToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillQiHuoKeJuToc.ProtoReflect.Descriptor instead.
func (*SkillQiHuoKeJuToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{1}
}

func (x *SkillQiHuoKeJuToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillQiHuoKeJuToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

// 肥原龙川【诡诈】：出牌阶段限一次，你可以指定一名角色，然后视为你对其使用了一张【威逼】或【利诱】。
type SkillGuiZhaTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId uint32   `protobuf:"varint,1,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	CardType       CardType `protobuf:"varint,2,opt,name=card_type,json=cardType,proto3,enum=CardType" json:"card_type,omitempty"` // 威逼还是利诱
	WantType       CardType `protobuf:"varint,3,opt,name=want_type,json=wantType,proto3,enum=CardType" json:"want_type,omitempty"` // 如果是威逼，还需要填威逼的卡牌类型
	Seq            uint32   `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillGuiZhaTos) Reset() {
	*x = SkillGuiZhaTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillGuiZhaTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillGuiZhaTos) ProtoMessage() {}

func (x *SkillGuiZhaTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillGuiZhaTos.ProtoReflect.Descriptor instead.
func (*SkillGuiZhaTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{2}
}

func (x *SkillGuiZhaTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillGuiZhaTos) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_Cheng_Qing
}

func (x *SkillGuiZhaTos) GetWantType() CardType {
	if x != nil {
		return x.WantType
	}
	return CardType_Cheng_Qing
}

func (x *SkillGuiZhaTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【诡诈】
type SkillGuiZhaToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32   `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	CardType       CardType `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3,enum=CardType" json:"card_type,omitempty"`
}

func (x *SkillGuiZhaToc) Reset() {
	*x = SkillGuiZhaToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillGuiZhaToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillGuiZhaToc) ProtoMessage() {}

func (x *SkillGuiZhaToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillGuiZhaToc.ProtoReflect.Descriptor instead.
func (*SkillGuiZhaToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{3}
}

func (x *SkillGuiZhaToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillGuiZhaToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillGuiZhaToc) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_Cheng_Qing
}

// 王魁【以牙还牙】：你接收黑色情报后，可以将一张黑色手牌置入情报传出者或其相邻角色的情报区，然后摸一张牌。
type SkillYiYaHuanYaTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId uint32 `protobuf:"varint,1,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	CardId         uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Seq            uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillYiYaHuanYaTos) Reset() {
	*x = SkillYiYaHuanYaTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillYiYaHuanYaTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillYiYaHuanYaTos) ProtoMessage() {}

func (x *SkillYiYaHuanYaTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillYiYaHuanYaTos.ProtoReflect.Descriptor instead.
func (*SkillYiYaHuanYaTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{4}
}

func (x *SkillYiYaHuanYaTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillYiYaHuanYaTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillYiYaHuanYaTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【以牙还牙】
type SkillYiYaHuanYaToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	Card           *Card  `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *SkillYiYaHuanYaToc) Reset() {
	*x = SkillYiYaHuanYaToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillYiYaHuanYaToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillYiYaHuanYaToc) ProtoMessage() {}

func (x *SkillYiYaHuanYaToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillYiYaHuanYaToc.ProtoReflect.Descriptor instead.
func (*SkillYiYaHuanYaToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{5}
}

func (x *SkillYiYaHuanYaToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillYiYaHuanYaToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillYiYaHuanYaToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

// 韩梅【移花接木】：争夺阶段，你可以翻开此角色牌，然后从一名角色的情报区选择一张情报，将其置入另一名角色的情报区，若如此做会让其收集三张或更多同色情报，则改为将该情牌加入你的手牌。
type SkillYiHuaJieMuTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPlayerId uint32 `protobuf:"varint,1,opt,name=from_player_id,json=fromPlayerId,proto3" json:"from_player_id,omitempty"`
	CardId       uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	ToPlayerId   uint32 `protobuf:"varint,3,opt,name=to_player_id,json=toPlayerId,proto3" json:"to_player_id,omitempty"`
	Seq          uint32 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillYiHuaJieMuTos) Reset() {
	*x = SkillYiHuaJieMuTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillYiHuaJieMuTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillYiHuaJieMuTos) ProtoMessage() {}

func (x *SkillYiHuaJieMuTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillYiHuaJieMuTos.ProtoReflect.Descriptor instead.
func (*SkillYiHuaJieMuTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{6}
}

func (x *SkillYiHuaJieMuTos) GetFromPlayerId() uint32 {
	if x != nil {
		return x.FromPlayerId
	}
	return 0
}

func (x *SkillYiHuaJieMuTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillYiHuaJieMuTos) GetToPlayerId() uint32 {
	if x != nil {
		return x.ToPlayerId
	}
	return 0
}

func (x *SkillYiHuaJieMuTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【移花接木】
type SkillYiHuaJieMuToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	FromPlayerId uint32 `protobuf:"varint,2,opt,name=from_player_id,json=fromPlayerId,proto3" json:"from_player_id,omitempty"`
	CardId       uint32 `protobuf:"varint,3,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	ToPlayerId   uint32 `protobuf:"varint,4,opt,name=to_player_id,json=toPlayerId,proto3" json:"to_player_id,omitempty"`
	JoinIntoHand bool   `protobuf:"varint,5,opt,name=join_into_hand,json=joinIntoHand,proto3" json:"join_into_hand,omitempty"` // 是否改为加入手牌
}

func (x *SkillYiHuaJieMuToc) Reset() {
	*x = SkillYiHuaJieMuToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillYiHuaJieMuToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillYiHuaJieMuToc) ProtoMessage() {}

func (x *SkillYiHuaJieMuToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillYiHuaJieMuToc.ProtoReflect.Descriptor instead.
func (*SkillYiHuaJieMuToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{7}
}

func (x *SkillYiHuaJieMuToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillYiHuaJieMuToc) GetFromPlayerId() uint32 {
	if x != nil {
		return x.FromPlayerId
	}
	return 0
}

func (x *SkillYiHuaJieMuToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillYiHuaJieMuToc) GetToPlayerId() uint32 {
	if x != nil {
		return x.ToPlayerId
	}
	return 0
}

func (x *SkillYiHuaJieMuToc) GetJoinIntoHand() bool {
	if x != nil {
		return x.JoinIntoHand
	}
	return false
}

// 鄭文先【偷天】：争夺阶段你可以翻开此角色牌，然后视为你使用了一张【截获】。
type SkillTouTianTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillTouTianTos) Reset() {
	*x = SkillTouTianTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillTouTianTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillTouTianTos) ProtoMessage() {}

func (x *SkillTouTianTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillTouTianTos.ProtoReflect.Descriptor instead.
func (*SkillTouTianTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{8}
}

func (x *SkillTouTianTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【偷天】
type SkillTouTianToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *SkillTouTianToc) Reset() {
	*x = SkillTouTianToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillTouTianToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillTouTianToc) ProtoMessage() {}

func (x *SkillTouTianToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillTouTianToc.ProtoReflect.Descriptor instead.
func (*SkillTouTianToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{9}
}

func (x *SkillTouTianToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 广播使用【换日】：你使用【调包】或【破译】后，可以将你的角色牌翻至面朝下。
type SkillHuanRiToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *SkillHuanRiToc) Reset() {
	*x = SkillHuanRiToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillHuanRiToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillHuanRiToc) ProtoMessage() {}

func (x *SkillHuanRiToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillHuanRiToc.ProtoReflect.Descriptor instead.
func (*SkillHuanRiToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{10}
}

func (x *SkillHuanRiToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 鬼脚【急送】：争夺阶段限一次，你可以弃置两张手牌，或从你的情报区弃置一张非黑色情报，然后将待收情报移至一名角色面前。
type SkillJiSongTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards      []*Card `protobuf:"bytes,1,rep,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`       // 弃置的两张手牌，和下面的情报二选一
	MessageCard    *Card   `protobuf:"bytes,2,opt,name=message_card,json=messageCard,proto3" json:"message_card,omitempty"` // 弃置的情报，和上面的手牌二选一
	TargetPlayerId uint32  `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	Seq            uint32  `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillJiSongTos) Reset() {
	*x = SkillJiSongTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillJiSongTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillJiSongTos) ProtoMessage() {}

func (x *SkillJiSongTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillJiSongTos.ProtoReflect.Descriptor instead.
func (*SkillJiSongTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{11}
}

func (x *SkillJiSongTos) GetHandCards() []*Card {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *SkillJiSongTos) GetMessageCard() *Card {
	if x != nil {
		return x.MessageCard
	}
	return nil
}

func (x *SkillJiSongTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillJiSongTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【急送】
type SkillJiSongToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	HandCards      []*Card `protobuf:"bytes,2,rep,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`       // 弃置的两张手牌，和下面的情报二选一
	MessageCard    *Card   `protobuf:"bytes,3,opt,name=message_card,json=messageCard,proto3" json:"message_card,omitempty"` // 弃置的情报，和上面的手牌二选一
	TargetPlayerId uint32  `protobuf:"varint,4,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
}

func (x *SkillJiSongToc) Reset() {
	*x = SkillJiSongToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillJiSongToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillJiSongToc) ProtoMessage() {}

func (x *SkillJiSongToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillJiSongToc.ProtoReflect.Descriptor instead.
func (*SkillJiSongToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{12}
}

func (x *SkillJiSongToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillJiSongToc) GetHandCards() []*Card {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *SkillJiSongToc) GetMessageCard() *Card {
	if x != nil {
		return x.MessageCard
	}
	return nil
}

func (x *SkillJiSongToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

// 邵秀【绵里藏针】：你传出的情报被接收后，可以将一张黑色手牌置入接收者的情报区，然后摸一张牌。
type SkillMianLiCangZhenTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId         uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	Seq            uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillMianLiCangZhenTos) Reset() {
	*x = SkillMianLiCangZhenTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillMianLiCangZhenTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillMianLiCangZhenTos) ProtoMessage() {}

func (x *SkillMianLiCangZhenTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillMianLiCangZhenTos.ProtoReflect.Descriptor instead.
func (*SkillMianLiCangZhenTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{13}
}

func (x *SkillMianLiCangZhenTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillMianLiCangZhenTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillMianLiCangZhenTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【绵里藏针】
type SkillMianLiCangZhenToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Card           *Card  `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
}

func (x *SkillMianLiCangZhenToc) Reset() {
	*x = SkillMianLiCangZhenToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillMianLiCangZhenToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillMianLiCangZhenToc) ProtoMessage() {}

func (x *SkillMianLiCangZhenToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillMianLiCangZhenToc.ProtoReflect.Descriptor instead.
func (*SkillMianLiCangZhenToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{14}
}

func (x *SkillMianLiCangZhenToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillMianLiCangZhenToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *SkillMianLiCangZhenToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

// 金生火【谨慎】：你接收双色情报后，可以用一张手牌与该情报面朝上互换。
type SkillJinShenTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillJinShenTos) Reset() {
	*x = SkillJinShenTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillJinShenTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillJinShenTos) ProtoMessage() {}

func (x *SkillJinShenTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillJinShenTos.ProtoReflect.Descriptor instead.
func (*SkillJinShenTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{15}
}

func (x *SkillJinShenTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillJinShenTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【谨慎】
type SkillJinShenToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Card     *Card  `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *SkillJinShenToc) Reset() {
	*x = SkillJinShenToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillJinShenToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillJinShenToc) ProtoMessage() {}

func (x *SkillJinShenToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillJinShenToc.ProtoReflect.Descriptor instead.
func (*SkillJinShenToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{16}
}

func (x *SkillJinShenToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillJinShenToc) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

// 白菲菲【怜悯】：你传出的非黑色情报被接收后，可以从你或接收者的情报区选择一张黑色情报加入你的手牌。
type SkillLianMinTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPlayerId uint32 `protobuf:"varint,1,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	CardId         uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Seq            uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillLianMinTos) Reset() {
	*x = SkillLianMinTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillLianMinTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillLianMinTos) ProtoMessage() {}

func (x *SkillLianMinTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillLianMinTos.ProtoReflect.Descriptor instead.
func (*SkillLianMinTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{17}
}

func (x *SkillLianMinTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillLianMinTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillLianMinTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【怜悯】
type SkillLianMinToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	CardId         uint32 `protobuf:"varint,3,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *SkillLianMinToc) Reset() {
	*x = SkillLianMinToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillLianMinToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillLianMinToc) ProtoMessage() {}

func (x *SkillLianMinToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillLianMinToc.ProtoReflect.Descriptor instead.
func (*SkillLianMinToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{18}
}

func (x *SkillLianMinToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillLianMinToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillLianMinToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

// 广播使用【腹黑】：你传出的黑色情报被接收后，你摸一张牌。
type SkillFuHeiToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *SkillFuHeiToc) Reset() {
	*x = SkillFuHeiToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillFuHeiToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillFuHeiToc) ProtoMessage() {}

func (x *SkillFuHeiToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillFuHeiToc.ProtoReflect.Descriptor instead.
func (*SkillFuHeiToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{19}
}

func (x *SkillFuHeiToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 端木静【新思潮】：出牌阶段限一次，你可以弃置一张手牌，然后摸两张牌。
type SkillXinSiChaoTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillXinSiChaoTos) Reset() {
	*x = SkillXinSiChaoTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillXinSiChaoTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillXinSiChaoTos) ProtoMessage() {}

func (x *SkillXinSiChaoTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillXinSiChaoTos.ProtoReflect.Descriptor instead.
func (*SkillXinSiChaoTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{20}
}

func (x *SkillXinSiChaoTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillXinSiChaoTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【新思潮】，弃牌和摸牌走原本的协议
type SkillXinSiChaoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *SkillXinSiChaoToc) Reset() {
	*x = SkillXinSiChaoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillXinSiChaoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillXinSiChaoToc) ProtoMessage() {}

func (x *SkillXinSiChaoToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillXinSiChaoToc.ProtoReflect.Descriptor instead.
func (*SkillXinSiChaoToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{21}
}

func (x *SkillXinSiChaoToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 广播使用【视死】：你接收黑色情报后，摸两张牌
type SkillShiSiToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *SkillShiSiToc) Reset() {
	*x = SkillShiSiToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillShiSiToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillShiSiToc) ProtoMessage() {}

func (x *SkillShiSiToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillShiSiToc.ProtoReflect.Descriptor instead.
func (*SkillShiSiToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{22}
}

func (x *SkillShiSiToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 广播询问客户端使用【如归】
type SkillWaitForRuGuiToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	WaitingSecond uint32 `protobuf:"varint,2,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"`
	Seq           uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillWaitForRuGuiToc) Reset() {
	*x = SkillWaitForRuGuiToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillWaitForRuGuiToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillWaitForRuGuiToc) ProtoMessage() {}

func (x *SkillWaitForRuGuiToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillWaitForRuGuiToc.ProtoReflect.Descriptor instead.
func (*SkillWaitForRuGuiToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{23}
}

func (x *SkillWaitForRuGuiToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillWaitForRuGuiToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *SkillWaitForRuGuiToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 老汉【如归】：你死亡前，可以将你情报区中的一张情报置入当前回合角色的情报区中。
type SkillRuGuiTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"` // 是否发动
	CardId uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Seq    uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillRuGuiTos) Reset() {
	*x = SkillRuGuiTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillRuGuiTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillRuGuiTos) ProtoMessage() {}

func (x *SkillRuGuiTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillRuGuiTos.ProtoReflect.Descriptor instead.
func (*SkillRuGuiTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{24}
}

func (x *SkillRuGuiTos) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *SkillRuGuiTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillRuGuiTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【如归】
type SkillRuGuiToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	CardId   uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *SkillRuGuiToc) Reset() {
	*x = SkillRuGuiToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillRuGuiToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillRuGuiToc) ProtoMessage() {}

func (x *SkillRuGuiToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillRuGuiToc.ProtoReflect.Descriptor instead.
func (*SkillRuGuiToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{25}
}

func (x *SkillRuGuiToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillRuGuiToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

// 广播询问客户端使用【转交】
type SkillWaitForZhuanJiaoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	WaitingSecond uint32 `protobuf:"varint,2,opt,name=waiting_second,json=waitingSecond,proto3" json:"waiting_second,omitempty"`
	Seq           uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillWaitForZhuanJiaoToc) Reset() {
	*x = SkillWaitForZhuanJiaoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillWaitForZhuanJiaoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillWaitForZhuanJiaoToc) ProtoMessage() {}

func (x *SkillWaitForZhuanJiaoToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillWaitForZhuanJiaoToc.ProtoReflect.Descriptor instead.
func (*SkillWaitForZhuanJiaoToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{26}
}

func (x *SkillWaitForZhuanJiaoToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillWaitForZhuanJiaoToc) GetWaitingSecond() uint32 {
	if x != nil {
		return x.WaitingSecond
	}
	return 0
}

func (x *SkillWaitForZhuanJiaoToc) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 白小年【转交】：你使用一张手牌后，可以从你的情报区选择一张非黑色情报，将其置入另一名角色的情报区，然后你摸两张牌。你不能通过此技能让任何角色收集三张或更多同色情报。
type SkillZhuanJiaoTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId         uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,2,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
	Seq            uint32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *SkillZhuanJiaoTos) Reset() {
	*x = SkillZhuanJiaoTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillZhuanJiaoTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillZhuanJiaoTos) ProtoMessage() {}

func (x *SkillZhuanJiaoTos) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillZhuanJiaoTos.ProtoReflect.Descriptor instead.
func (*SkillZhuanJiaoTos) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{27}
}

func (x *SkillZhuanJiaoTos) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillZhuanJiaoTos) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

func (x *SkillZhuanJiaoTos) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// 广播使用【转交】
type SkillZhuanJiaoToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	CardId         uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	TargetPlayerId uint32 `protobuf:"varint,3,opt,name=target_player_id,json=targetPlayerId,proto3" json:"target_player_id,omitempty"`
}

func (x *SkillZhuanJiaoToc) Reset() {
	*x = SkillZhuanJiaoToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillZhuanJiaoToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillZhuanJiaoToc) ProtoMessage() {}

func (x *SkillZhuanJiaoToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillZhuanJiaoToc.ProtoReflect.Descriptor instead.
func (*SkillZhuanJiaoToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{28}
}

func (x *SkillZhuanJiaoToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SkillZhuanJiaoToc) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *SkillZhuanJiaoToc) GetTargetPlayerId() uint32 {
	if x != nil {
		return x.TargetPlayerId
	}
	return 0
}

// 广播使用【明饵】：你传出的红色或蓝色情报被接收后，你和接收者各摸一张牌。
type SkillMingErToc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *SkillMingErToc) Reset() {
	*x = SkillMingErToc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_role_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillMingErToc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillMingErToc) ProtoMessage() {}

func (x *SkillMingErToc) ProtoReflect() protoreflect.Message {
	mi := &file_role_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillMingErToc.ProtoReflect.Descriptor instead.
func (*SkillMingErToc) Descriptor() ([]byte, []int) {
	return file_role_proto_rawDescGZIP(), []int{29}
}

func (x *SkillMingErToc) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

var File_role_proto protoreflect.FileDescriptor

var file_role_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x16, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x69, 0x5f, 0x68, 0x75, 0x6f, 0x5f, 0x6b, 0x65, 0x5f, 0x6a, 0x75,
	0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22,
	0x4e, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x69, 0x5f, 0x68, 0x75, 0x6f, 0x5f,
	0x6b, 0x65, 0x5f, 0x6a, 0x75, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x7a, 0x68,
	0x61, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x75,
	0x69, 0x5f, 0x7a, 0x68, 0x61, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x17, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x79, 0x69, 0x5f, 0x79, 0x61, 0x5f, 0x68, 0x75, 0x61, 0x6e, 0x5f, 0x79, 0x61,
	0x5f, 0x74, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x7b, 0x0a, 0x17, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x79, 0x69, 0x5f, 0x79, 0x61, 0x5f, 0x68, 0x75, 0x61, 0x6e, 0x5f, 0x79, 0x61,
	0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x79, 0x69, 0x5f, 0x68, 0x75, 0x61, 0x5f, 0x6a, 0x69, 0x65, 0x5f, 0x6d, 0x75, 0x5f, 0x74,
	0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x79, 0x69, 0x5f, 0x68, 0x75, 0x61, 0x5f, 0x6a, 0x69, 0x65, 0x5f, 0x6d, 0x75, 0x5f, 0x74, 0x6f,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x74,
	0x6f, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x26, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74,
	0x6f, 0x75, 0x5f, 0x74, 0x69, 0x61, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x31, 0x0a,
	0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x5f, 0x74, 0x69, 0x61, 0x6e, 0x5f,
	0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x30, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x68, 0x75, 0x61, 0x6e, 0x5f, 0x72,
	0x69, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6a, 0x69, 0x5f,
	0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6a,
	0x69, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x72, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x61, 0x6e, 0x5f,
	0x6c, 0x69, 0x5f, 0x63, 0x61, 0x6e, 0x67, 0x5f, 0x7a, 0x68, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x7f, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d,
	0x69, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x5f, 0x63, 0x61, 0x6e, 0x67, 0x5f, 0x7a, 0x68, 0x65, 0x6e,
	0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x4c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6a, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x69, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x22, 0x74, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x61, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x66, 0x75, 0x5f, 0x68, 0x65, 0x69, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x78, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6f, 0x5f, 0x74, 0x6f, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x34, 0x0a, 0x15, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x78, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6f,
	0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x2f, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x5f, 0x73,
	0x69, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x71, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x74, 0x6f, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x55, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72,
	0x75, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x48, 0x0a, 0x10,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x74, 0x6f, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x5f, 0x6a,
	0x69, 0x61, 0x6f, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x6b, 0x0a,
	0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x5f, 0x6a, 0x69, 0x61,
	0x6f, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x76, 0x0a, 0x14, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x7a, 0x68, 0x75, 0x61, 0x6e, 0x5f, 0x6a, 0x69, 0x61, 0x6f, 0x5f, 0x74,
	0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_role_proto_rawDescOnce sync.Once
	file_role_proto_rawDescData = file_role_proto_rawDesc
)

func file_role_proto_rawDescGZIP() []byte {
	file_role_proto_rawDescOnce.Do(func() {
		file_role_proto_rawDescData = protoimpl.X.CompressGZIP(file_role_proto_rawDescData)
	})
	return file_role_proto_rawDescData
}

var file_role_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_role_proto_goTypes = []interface{}{
	(*SkillQiHuoKeJuTos)(nil),        // 0: skill_qi_huo_ke_ju_tos
	(*SkillQiHuoKeJuToc)(nil),        // 1: skill_qi_huo_ke_ju_toc
	(*SkillGuiZhaTos)(nil),           // 2: skill_gui_zha_tos
	(*SkillGuiZhaToc)(nil),           // 3: skill_gui_zha_toc
	(*SkillYiYaHuanYaTos)(nil),       // 4: skill_yi_ya_huan_ya_tos
	(*SkillYiYaHuanYaToc)(nil),       // 5: skill_yi_ya_huan_ya_toc
	(*SkillYiHuaJieMuTos)(nil),       // 6: skill_yi_hua_jie_mu_tos
	(*SkillYiHuaJieMuToc)(nil),       // 7: skill_yi_hua_jie_mu_toc
	(*SkillTouTianTos)(nil),          // 8: skill_tou_tian_tos
	(*SkillTouTianToc)(nil),          // 9: skill_tou_tian_toc
	(*SkillHuanRiToc)(nil),           // 10: skill_huan_ri_toc
	(*SkillJiSongTos)(nil),           // 11: skill_ji_song_tos
	(*SkillJiSongToc)(nil),           // 12: skill_ji_song_toc
	(*SkillMianLiCangZhenTos)(nil),   // 13: skill_mian_li_cang_zhen_tos
	(*SkillMianLiCangZhenToc)(nil),   // 14: skill_mian_li_cang_zhen_toc
	(*SkillJinShenTos)(nil),          // 15: skill_jin_shen_tos
	(*SkillJinShenToc)(nil),          // 16: skill_jin_shen_toc
	(*SkillLianMinTos)(nil),          // 17: skill_lian_min_tos
	(*SkillLianMinToc)(nil),          // 18: skill_lian_min_toc
	(*SkillFuHeiToc)(nil),            // 19: skill_fu_hei_toc
	(*SkillXinSiChaoTos)(nil),        // 20: skill_xin_si_chao_tos
	(*SkillXinSiChaoToc)(nil),        // 21: skill_xin_si_chao_toc
	(*SkillShiSiToc)(nil),            // 22: skill_shi_si_toc
	(*SkillWaitForRuGuiToc)(nil),     // 23: skill_wait_for_ru_gui_toc
	(*SkillRuGuiTos)(nil),            // 24: skill_ru_gui_tos
	(*SkillRuGuiToc)(nil),            // 25: skill_ru_gui_toc
	(*SkillWaitForZhuanJiaoToc)(nil), // 26: skill_wait_for_zhuan_jiao_toc
	(*SkillZhuanJiaoTos)(nil),        // 27: skill_zhuan_jiao_tos
	(*SkillZhuanJiaoToc)(nil),        // 28: skill_zhuan_jiao_toc
	(*SkillMingErToc)(nil),           // 29: skill_ming_er_toc
	(CardType)(0),                    // 30: card_type
	(*Card)(nil),                     // 31: card
}
var file_role_proto_depIdxs = []int32{
	30, // 0: skill_gui_zha_tos.card_type:type_name -> card_type
	30, // 1: skill_gui_zha_tos.want_type:type_name -> card_type
	30, // 2: skill_gui_zha_toc.card_type:type_name -> card_type
	31, // 3: skill_yi_ya_huan_ya_toc.card:type_name -> card
	31, // 4: skill_ji_song_tos.hand_cards:type_name -> card
	31, // 5: skill_ji_song_tos.message_card:type_name -> card
	31, // 6: skill_ji_song_toc.hand_cards:type_name -> card
	31, // 7: skill_ji_song_toc.message_card:type_name -> card
	31, // 8: skill_mian_li_cang_zhen_toc.card:type_name -> card
	31, // 9: skill_jin_shen_toc.card:type_name -> card
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_role_proto_init() }
func file_role_proto_init() {
	if File_role_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_role_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillQiHuoKeJuTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillQiHuoKeJuToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillGuiZhaTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillGuiZhaToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillYiYaHuanYaTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillYiYaHuanYaToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillYiHuaJieMuTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillYiHuaJieMuToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillTouTianTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillTouTianToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillHuanRiToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillJiSongTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillJiSongToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillMianLiCangZhenTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillMianLiCangZhenToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillJinShenTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillJinShenToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillLianMinTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillLianMinToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillFuHeiToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillXinSiChaoTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillXinSiChaoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillShiSiToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillWaitForRuGuiToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillRuGuiTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillRuGuiToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillWaitForZhuanJiaoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillZhuanJiaoTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillZhuanJiaoToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_role_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillMingErToc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_role_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_role_proto_goTypes,
		DependencyIndexes: file_role_proto_depIdxs,
		MessageInfos:      file_role_proto_msgTypes,
	}.Build()
	File_role_proto = out.File
	file_role_proto_rawDesc = nil
	file_role_proto_goTypes = nil
	file_role_proto_depIdxs = nil
}
